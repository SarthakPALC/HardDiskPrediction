@version: 3.5
@include "scl.conf"

source s_sys{
  network(
    transport("udp"),
    port(514),
  );
};

destination d_mongodb {
  mongodb(
    uri("mongodb://mongoadmin:bdung@127.0.0.1:27017/syslog?authSource=admin")
    collection("alarms")
#    workers(8)
  );
    
};
destination d_mongodb_logs_summary {
  mongodb(
    uri("mongodb://mongoadmin:bdung@127.0.0.1:27017/syslog?authSource=admin")
    collection("all_events")
#    workers(8)
  );
};

python {

"""
Syslog-ng alarm parser
"""

import re
#from syslogng import LogParser

class AlarmParser(object):
    def init(self, options):
        """
        Initiate the parser patterns
        """
        self.regexPatterns = ["Port [A-Za-z0-9]+ oper state set from up to down", "Port [A-Za-z0-9]+ oper state set from down to up"]

        return True
    def deinit(self):
        """
        Deinitate the parser
        """
        pass
    def parse(self, log_message):
        """
        Check regex
        """
        decoded_msg = log_message['MESSAGE'].decode('utf-8')
        gotMatch = False
        for regEx in self.regexPatterns:
            result = re.search(regEx,decoded_msg )
            if result:
                gotMatch = True
                break

        if gotMatch:
            return True
        else:
            return False
};

parser p_alarms {
  python(
    class("AlarmParser")
    options("regex", "seq: (?P<seq>\\d+), thread: (?P<thread>\\d+), runid: (?P<runid>\\d+), stamp: (?P<stamp>[^ ]+) (?P<padding>.*$)")

  );
};

log {
  source(s_sys);
  parser(p_alarms);
  destination(d_mongodb);
};


log {
  source(s_sys);
  destination(d_mongodb_logs_summary);
};
